on:
  push:
    branches-ignore:
    - gh-pages
    tags:
    - "*"
  schedule:
  - cron: 59 14 * * *
  pull_request: []
name: main

jobs:
  build:
    if: github.event_name != 'schedule' || github.repository == 'planetarium/libplanet'
    name: dist
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master
      if: github.event_name != 'pull_request'
    - uses: actions/checkout@master
      if: github.event_name == 'pull_request'
      with:
        ref: ${{ github.pull_request.head.sha }}
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.100
    - run: .github/bin/dist-version.ps1
      shell: pwsh
    - run: .github/bin/dist-release-note.sh CHANGES.md obj/release_note.txt
    - uses: actions/upload-artifact@master
      with:
        name: dist-obj
        path: obj/
    - run: .github/bin/dist-pack.sh
    - run: |
        . .github/bin/constants.sh
        mkdir -p /tmp/dist-bin/
        for project in "${projects[@]}"; do
          cp -r "$project/bin/$configuration"/* /tmp/dist-bin/
        done
    - uses: actions/upload-artifact@master
      with:
        name: dist-bin
        path: /tmp/dist-bin/
    - if: >-
        github.event_name != 'pull_request' &&
        startsWith(github.ref, 'refs/tags/')
      run: .github/bin/dist-github-release.sh
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - if: github.event_name != 'pull_request' && env.NUGET_API_KEY != ''
      run: .github/bin/dist-nuget.sh
      env:
        NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}

  docs:
    if: github.event_name != 'schedule' || github.repository == 'planetarium/libplanet'
    name: docs
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master
      if: github.event_name != 'pull_request'
    - uses: actions/checkout@master
      if: github.event_name == 'pull_request'
      with:
        ref: ${{ github.pull_request.head.sha }}
    - run: mkdir -p Docs/obj/
    - run: Docs/build.ps1
      shell: pwsh
    - uses: actions/upload-artifact@master
      with:
        name: docs
        path: Docs/_site/
    - run: Docs/publish.sh
      env:
        GHPAGES_SSH_KEY: ${{ secrets.GHPAGES_SSH_KEY }}
      if: github.event_name != 'pull_request'
    - uses: shawnbot/action-status@master
      env:
        GH_CHECK_STATUS_TOKEN: ${{ secrets.GH_CHECK_STATUS_TOKEN }}
      with:
        args: >-
          --repository="${{ github.repository }}"
          --sha="${{ github.sha }}"
          --context=docs
          --description='Libplanet docs generated by DocFX'
          --state=success
          --url="$(cat Docs/obj/url.txt)"
          --token="$GH_CHECK_STATUS_TOKEN"
      if: github.event_name != 'pull_request' && env.GH_CHECK_STATUS_TOKEN != ''

  bundle:
    name: bundle
    needs: [build]
    runs-on: ubuntu-18.04
    steps:
    - run: sudo apt-get install nuget
    - uses: actions/checkout@master
      if: github.event_name != 'pull_request'
    - uses: actions/checkout@master
      if: github.event_name == 'pull_request'
      with:
        ref: ${{ github.pull_request.head.sha }}
    - uses: actions/download-artifact@master
      with:
        name: dist-bin
        path: /tmp/nupkg
    - run: |
        targets=(netcoreapp3.1 net472 net462 net461)
        for target in "${targets[@]}"; do
          find /tmp/nupkg \
            -name '*.nupkg' \
            -exec .github/bin/bundle.sh {} /tmp/bundles "$target" ';'
        done
      shell: bash
    - uses: actions/upload-artifact@master
      with:
        name: bundles
        path: /tmp/bundles
    - if: >-
        github.event_name != 'pull_request' &&
        startsWith(github.ref, 'refs/tags/')
      run: |
        tag="${GITHUB_REF#refs/*/}"
        github_user="${GITHUB_REPOSITORY%/*}"
        github_repo="${GITHUB_REPOSITORY#*/}"
        for bundle in /tmp/bundles/*; do
          .github/bin/github-release.sh upload \
            --user "$github_user" \
            --repo "$github_repo" \
            --tag "$tag" \
            --name "$(basename "$bundle")" \
            --file "$bundle"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
